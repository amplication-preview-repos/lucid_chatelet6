/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Author as PrismaAuthor,
  Analytics as PrismaAnalytics,
  Course as PrismaCourse,
  Subscription as PrismaSubscription,
} from "@prisma/client";

import { AuthorCreateInput } from "./AuthorCreateInput";

export class AuthorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AuthorCountArgs, "select">): Promise<number> {
    return this.prisma.author.count(args);
  }

  async authors(args: Prisma.AuthorFindManyArgs): Promise<PrismaAuthor[]> {
    return this.prisma.author.findMany(args);
  }
  async author(
    args: Prisma.AuthorFindUniqueArgs
  ): Promise<PrismaAuthor | null> {
    return this.prisma.author.findUnique(args);
  }
  async createAuthor(args: Prisma.AuthorCreateArgs): Promise<PrismaAuthor> {
    return this.prisma.author.create(args);
  }
  async updateAuthor(args: Prisma.AuthorUpdateArgs): Promise<PrismaAuthor> {
    return this.prisma.author.update(args);
  }
  async deleteAuthor(args: Prisma.AuthorDeleteArgs): Promise<PrismaAuthor> {
    return this.prisma.author.delete(args);
  }

  async findAnalyticsItems(
    parentId: string,
    args: Prisma.AnalyticsFindManyArgs
  ): Promise<PrismaAnalytics[]> {
    return this.prisma.author
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .analyticsItems(args);
  }

  async findCourses(
    parentId: string,
    args: Prisma.CourseFindManyArgs
  ): Promise<PrismaCourse[]> {
    return this.prisma.author
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .courses(args);
  }

  async findSubscriptions(
    parentId: string,
    args: Prisma.SubscriptionFindManyArgs
  ): Promise<PrismaSubscription[]> {
    return this.prisma.author
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .subscriptions(args);
  }
  async AuthorizeSubscriberOrAuthor(args: AuthorCreateInput): Promise<string> {
    throw new Error("Not implemented");
  }
}
